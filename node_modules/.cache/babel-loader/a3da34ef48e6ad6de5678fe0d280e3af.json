{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js\";\nimport { shape } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({\n  children\n}) => {\n  const [data, setData] = useState([{\n    count: number,\n    next: string,\n    previous: any,\n    results: {\n      name: string,\n      rotation_period: string,\n      orbital_period: string,\n      diameter: string,\n      climate: string,\n      gravity: string,\n      terrain: string,\n      surface_water: string,\n      url: string\n    }\n  }]); // const fetchPlanetsStarWars = async () => {\n  //   const { results } = await getPlanetsStarWars();\n  //   results.forEach((element) => delete element.residents);\n  //   setData(results);\n  // };\n\n  useEffect(() => {\n    const getPlanetsStarWars = async () => {\n      try {\n        const response = await fetch('https://swapi-trybe.herokuapp.com/api/planets/');\n        const {\n          results\n        } = await response.json();\n        setData(results);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n    getPlanetsStarWars();\n  }, []);\n  const context = {\n    data // fetchPlanetsStarWars,\n\n  };\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired\n};\nexport default StarWarsProvider;","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js"],"names":["shape","React","useEffect","useState","StarWarsContext","StarWarsProvider","children","data","setData","count","number","next","string","previous","any","results","name","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","url","getPlanetsStarWars","response","fetch","json","error","console","log","message","context","propTypes","isRequired"],"mappings":";AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,CAAC;AAChCM,IAAAA,KAAK,EAAEC,MADyB;AAEhCC,IAAAA,IAAI,EAAEC,MAF0B;AAGhCC,IAAAA,QAAQ,EAAEC,GAHsB;AAIhCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAEJ,MADC;AAEPK,MAAAA,eAAe,EAAEL,MAFV;AAGPM,MAAAA,cAAc,EAAEN,MAHT;AAIPO,MAAAA,QAAQ,EAAEP,MAJH;AAKPQ,MAAAA,OAAO,EAAER,MALF;AAMPS,MAAAA,OAAO,EAAET,MANF;AAOPU,MAAAA,OAAO,EAAEV,MAPF;AAQPW,MAAAA,aAAa,EAAEX,MARR;AASPY,MAAAA,GAAG,EAAEZ;AATE;AAJuB,GAAD,CAAD,CAAhC,CADyC,CAkBzC;AACA;AACA;AACA;AACA;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,kBAAkB,GAAG,YAAY;AACrC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAD,CAA5B;AACA,cAAM;AAAEZ,UAAAA;AAAF,YAAc,MAAMW,QAAQ,CAACE,IAAT,EAA1B;AACApB,QAAAA,OAAO,CAACO,OAAD,CAAP;AACD,OAJD,CAIE,OAAOc,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,KARD;;AASAP,IAAAA,kBAAkB;AACnB,GAXQ,EAWN,EAXM,CAAT;AAaA,QAAMQ,OAAO,GAAG;AACd1B,IAAAA,IADc,CAEd;;AAFc,GAAhB;AAKA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAG0B,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3B,QADH,CADF;AAKD,CA/CD;;AAiDAD,gBAAgB,CAAC6B,SAAjB,GAA6B;AAC3B5B,EAAAA,QAAQ,EAAEN,KAAK,GAAGmC;AADS,CAA7B;AAIA,eAAe9B,gBAAf","sourcesContent":["import { shape } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setData] = useState([{\n    count: number,\n    next: string,\n    previous: any,\n    results: {\n      name: string,\n      rotation_period: string,\n      orbital_period: string,\n      diameter: string,\n      climate: string,\n      gravity: string,\n      terrain: string,\n      surface_water: string,\n      url: string,\n    },\n  }]);\n\n  // const fetchPlanetsStarWars = async () => {\n  //   const { results } = await getPlanetsStarWars();\n  //   results.forEach((element) => delete element.residents);\n  //   setData(results);\n  // };\n\n  useEffect(() => {\n    const getPlanetsStarWars = async () => {\n      try {\n        const response = await fetch('https://swapi-trybe.herokuapp.com/api/planets/');\n        const { results } = await response.json();\n        setData(results);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getPlanetsStarWars();\n  }, []);\n\n  const context = {\n    data,\n    // fetchPlanetsStarWars,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children }\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired,\n};\n\nexport default StarWarsProvider;\n"]},"metadata":{},"sourceType":"module"}