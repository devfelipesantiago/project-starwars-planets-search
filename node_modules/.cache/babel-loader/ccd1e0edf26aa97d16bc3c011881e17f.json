{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js\";\nimport { shape } from 'prop-types';\nimport React, { useState } from 'react';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({\n  children\n}) => {\n  const [data, setData] = useState([{\n    count: 0,\n    next: '',\n    previous: null,\n    results: {\n      name: '',\n      rotation_period: '',\n      orbital_period: '',\n      diameter: '',\n      climate: '',\n      gravity: '',\n      terrain: '',\n      surface_water: '',\n      url: ''\n    }\n  }]);\n\n  const fetchPlanetsStarWars = async () => {\n    const {\n      results\n    } = await getPlanetsStarWars();\n    results.forEach(element => delete element.residents);\n    setData(results);\n  }; // useEffect(() => {\n  //   const getPlanetsStarWars = async () => {\n  //     try {\n  //       const response = await fetch('https://swapi-trybe.herokuapp.com/api/planets/');\n  //       const { results } = await response.json();\n  //       setData(results);\n  //     } catch (error) {\n  //       console.log(error.message);\n  //     }\n  //   };\n  //   getPlanetsStarWars();\n  // }, []);\n\n\n  const context = {\n    data,\n    fetchPlanetsStarWars\n  };\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired\n};\nexport default StarWarsProvider;","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js"],"names":["shape","React","useState","StarWarsContext","StarWarsProvider","children","data","setData","count","next","previous","results","name","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","url","fetchPlanetsStarWars","getPlanetsStarWars","forEach","element","residents","context","propTypes","isRequired"],"mappings":";AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,CAAC;AAChCM,IAAAA,KAAK,EAAE,CADyB;AAEhCC,IAAAA,IAAI,EAAE,EAF0B;AAGhCC,IAAAA,QAAQ,EAAE,IAHsB;AAIhCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE,EADC;AAEPC,MAAAA,eAAe,EAAE,EAFV;AAGPC,MAAAA,cAAc,EAAE,EAHT;AAIPC,MAAAA,QAAQ,EAAE,EAJH;AAKPC,MAAAA,OAAO,EAAE,EALF;AAMPC,MAAAA,OAAO,EAAE,EANF;AAOPC,MAAAA,OAAO,EAAE,EAPF;AAQPC,MAAAA,aAAa,EAAE,EARR;AASPC,MAAAA,GAAG,EAAE;AATE;AAJuB,GAAD,CAAD,CAAhC;;AAiBA,QAAMC,oBAAoB,GAAG,YAAY;AACvC,UAAM;AAAEV,MAAAA;AAAF,QAAc,MAAMW,kBAAkB,EAA5C;AACAX,IAAAA,OAAO,CAACY,OAAR,CAAiBC,OAAD,IAAa,OAAOA,OAAO,CAACC,SAA5C;AACAlB,IAAAA,OAAO,CAACI,OAAD,CAAP;AACD,GAJD,CAlByC,CAwBzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMe,OAAO,GAAG;AACdpB,IAAAA,IADc;AAEde,IAAAA;AAFc,GAAhB;AAKA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAGK,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGrB,QADH,CADF;AAKD,CA/CD;;AAiDAD,gBAAgB,CAACuB,SAAjB,GAA6B;AAC3BtB,EAAAA,QAAQ,EAAEL,KAAK,GAAG4B;AADS,CAA7B;AAIA,eAAexB,gBAAf","sourcesContent":["import { shape } from 'prop-types';\nimport React, { useState } from 'react';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setData] = useState([{\n    count: 0,\n    next: '',\n    previous: null,\n    results: {\n      name: '',\n      rotation_period: '',\n      orbital_period: '',\n      diameter: '',\n      climate: '',\n      gravity: '',\n      terrain: '',\n      surface_water: '',\n      url: '',\n    },\n  }]);\n\n  const fetchPlanetsStarWars = async () => {\n    const { results } = await getPlanetsStarWars();\n    results.forEach((element) => delete element.residents);\n    setData(results);\n  };\n\n  // useEffect(() => {\n  //   const getPlanetsStarWars = async () => {\n  //     try {\n  //       const response = await fetch('https://swapi-trybe.herokuapp.com/api/planets/');\n  //       const { results } = await response.json();\n  //       setData(results);\n  //     } catch (error) {\n  //       console.log(error.message);\n  //     }\n  //   };\n  //   getPlanetsStarWars();\n  // }, []);\n\n  const context = {\n    data,\n    fetchPlanetsStarWars,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children }\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired,\n};\n\nexport default StarWarsProvider;\n"]},"metadata":{},"sourceType":"module"}