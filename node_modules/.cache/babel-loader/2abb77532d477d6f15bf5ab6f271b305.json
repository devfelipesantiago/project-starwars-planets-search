{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Components/Table.jsx\";\nimport React, { useContext } from 'react';\nimport StarWarsContext from '../Context/StarWarsContext';\nimport Filters from './Filters';\nexport default (() => {\n  const {\n    filters,\n    data\n  } = useContext(StarWarsContext);\n\n  const renderHeader = () => /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, \"Rotation Period\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, \"Orbital Period\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, \"diameter\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"Climate\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, \"Gravity\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, \"Terrain\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"Surface Water\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, \"Population\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, \"Films\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \"Created\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"Edited\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"URL\"));\n\n  const renderBody = list => list.map((planet, index) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"data-testid\": \"planet-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, Number(planet.rotation_period)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, Number(planet.orbital_period)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, Number(planet.diameter)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, planet.gravity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, planet.terrain), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, Number(planet.surface_water)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, planet.population), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, planet.films), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, planet.created), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, planet.edited), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, planet.url))); // const isNumber = (value) => { return Number.isNaN(+value) ? value : +value; };\n\n\n  const orderTable = list => {\n    const {\n      column,\n      sort\n    } = filters.order;\n    const one = 1;\n    const oneLess = -1;\n\n    if (sort === 'ASC') {\n      list.sort((a, b) => {\n        const data1 = Number.isNaN(+a[column]) ? a[column] : +a[column];\n        const data2 = Number.isNaN(+b[column]) ? b[column] : +b[column];\n        if (data1 > data2) return one;\n        if (data2 > data1) return oneLess;\n        return 0;\n      });\n    }\n\n    if (sort === 'DESC') {\n      list.sort((a, b) => {\n        if (a[column] < b[column]) return one;\n        if (b[column] < a[column]) return oneLess;\n        return 0;\n      });\n    }\n  };\n\n  const filterPlanets = () => {\n    let planets = data.filter(planet => planet.name.match(filters.filterByName.name));\n\n    if (filters.filterByNumericValues.length) {\n      filters.filterByNumericValues.forEach(({\n        column,\n        comparison,\n        value\n      }) => {\n        if (comparison === 'maior que') {\n          planets = planets.filter(planet => Number(planet[column]) > value);\n        }\n\n        if (comparison === 'menor que') {\n          planets = planets.filter(planet => Number(planet[column]) < value);\n        }\n\n        if (comparison === 'igual a') {\n          planets = planets.filter(planet => Number(planet[column]) === Number(value));\n        }\n      });\n    }\n\n    orderTable(planets);\n    return planets;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Filters, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, renderHeader(), renderBody(filterPlanets()))));\n});","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Components/Table.jsx"],"names":["React","useContext","StarWarsContext","Filters","filters","data","renderHeader","renderBody","list","map","planet","index","name","Number","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","orderTable","column","sort","order","one","oneLess","a","b","data1","isNaN","data2","filterPlanets","planets","filter","match","filterByName","filterByNumericValues","length","forEach","comparison","value"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport StarWarsContext from '../Context/StarWarsContext';\nimport Filters from './Filters';\n\nexport default () => {\n  const { filters, data } = useContext(StarWarsContext);\n\n  const renderHeader = () => (\n    <tr>\n      <th>Name</th>\n      <th>Rotation Period</th>\n      <th>Orbital Period</th>\n      <th>diameter</th>\n      <th>Climate</th>\n      <th>Gravity</th>\n      <th>Terrain</th>\n      <th>Surface Water</th>\n      <th>Population</th>\n      <th>Films</th>\n      <th>Created</th>\n      <th>Edited</th>\n      <th>URL</th>\n    </tr>\n  );\n\n  const renderBody = (list) => (\n    list.map((planet, index) => (\n      <tr key={ index }>\n        <td data-testid=\"planet-name\">{ planet.name }</td>\n        <td>{ Number(planet.rotation_period) }</td>\n        <td>{ Number(planet.orbital_period) }</td>\n        <td>{ Number(planet.diameter) }</td>\n        <td>{ planet.climate }</td>\n        <td>{ planet.gravity }</td>\n        <td>{ planet.terrain }</td>\n        <td>{ Number(planet.surface_water) }</td>\n        <td>{ planet.population }</td>\n        <td>{ planet.films }</td>\n        <td>{ planet.created }</td>\n        <td>{ planet.edited }</td>\n        <td>{ planet.url }</td>\n      </tr>\n    ))\n  );\n\n  // const isNumber = (value) => { return Number.isNaN(+value) ? value : +value; };\n\n  const orderTable = (list) => {\n    const { column, sort } = filters.order;\n    const one = 1;\n    const oneLess = -1;\n\n    if (sort === 'ASC') {\n      list.sort((a, b) => {\n        const data1 = Number.isNaN(+a[column]) ? a[column] : +a[column];\n        const data2 = Number.isNaN(+b[column]) ? b[column] : +b[column];\n\n        if (data1 > data2) return one;\n        if (data2 > data1) return oneLess;\n        return 0;\n      });\n    }\n\n    if (sort === 'DESC') {\n      list.sort((a, b) => {\n        if (a[column] < b[column]) return one;\n        if (b[column] < a[column]) return oneLess;\n        return 0;\n      });\n    }\n  };\n\n  const filterPlanets = () => {\n    let planets = data\n      .filter((planet) => planet.name.match(filters.filterByName.name));\n\n    if (filters.filterByNumericValues.length) {\n      filters.filterByNumericValues\n        .forEach(({ column, comparison, value }) => {\n          if (comparison === 'maior que') {\n            planets = planets\n              .filter((planet) => Number(planet[column]) > value);\n          }\n          if (comparison === 'menor que') {\n            planets = planets\n              .filter((planet) => Number(planet[column]) < value);\n          }\n          if (comparison === 'igual a') {\n            planets = planets\n              .filter((planet) => Number(planet[column]) === Number(value));\n          }\n        });\n    }\n    orderTable(planets);\n    return planets;\n  };\n\n  return (\n    <>\n      <Filters />\n      <table>\n        <tbody>\n          { renderHeader() }\n          { renderBody(filterPlanets()) }\n        </tbody>\n      </table>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}