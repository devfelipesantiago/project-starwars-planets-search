{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js\";\nimport { shape } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport getPlanetsStarWars from '../Services/fetchAPI';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({\n  children\n}) => {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {},\n    filterByNumericValues: [{}],\n    order: {}\n  });\n\n  const fetchPlanetsStarWars = async () => {\n    const {\n      results\n    } = await getPlanetsStarWars();\n    results.forEach(element => delete element.residents);\n    setData(results);\n  };\n\n  useEffect(() => {\n    fetchPlanetsStarWars();\n    setFilters(data);\n  }, []);\n\n  const filterByName = name => {\n    setFilters(data.filter(planet => planet.name.match(name)));\n  };\n\n  const filtersByNumber = planetsFiltered => {\n    if (comparison === 'igual a') {\n      setFilters(planetsFiltered.filter(planet => Number(planet[column]) === Number(value)));\n    }\n\n    if (comparison === 'menor que') {\n      setFilters(planetsFiltered.filter(planet => Number(planet[column]) < Number(value)));\n    }\n\n    if (comparison === 'maior que') {\n      setFilters(planetsFiltered.filter(planet => Number(planet[column]) > Number(value)));\n    }\n\n    return true;\n  };\n\n  const handleClickFilter = name => {\n    setPlanets(filtersByNumber(filterByNames(name)));\n  };\n\n  const context = {\n    data,\n    setFilters,\n    filters,\n    planets,\n    setPlanets\n  };\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired\n};\nexport default StarWarsProvider;","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js"],"names":["shape","React","useEffect","useState","getPlanetsStarWars","StarWarsContext","StarWarsProvider","children","data","setData","planets","setPlanets","filters","setFilters","filterByName","filterByNumericValues","order","fetchPlanetsStarWars","results","forEach","element","residents","name","filter","planet","match","filtersByNumber","planetsFiltered","comparison","Number","column","value","handleClickFilter","filterByNames","context","propTypes","isRequired"],"mappings":";AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC;AACrCW,IAAAA,YAAY,EAAE,EADuB;AAErCC,IAAAA,qBAAqB,EAAE,CAAC,EAAD,CAFc;AAGrCC,IAAAA,KAAK,EAAE;AAH8B,GAAD,CAAtC;;AAMA,QAAMC,oBAAoB,GAAG,YAAY;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAMd,kBAAkB,EAA5C;AACAc,IAAAA,OAAO,CAACC,OAAR,CAAiBC,OAAD,IAAa,OAAOA,OAAO,CAACC,SAA5C;AACAZ,IAAAA,OAAO,CAACS,OAAD,CAAP;AACD,GAJD;;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,oBAAoB;AACpBJ,IAAAA,UAAU,CAACL,IAAD,CAAV;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMM,YAAY,GAAIQ,IAAD,IAAU;AAC7BT,IAAAA,UAAU,CAACL,IAAI,CAACe,MAAL,CAAaC,MAAD,IAAYA,MAAM,CAACF,IAAP,CAAYG,KAAZ,CAAkBH,IAAlB,CAAxB,CAAD,CAAV;AACD,GAFD;;AAIA,QAAMI,eAAe,GAAIC,eAAD,IAAqB;AAC3C,QAAIC,UAAU,KAAK,SAAnB,EAA8B;AAC5Bf,MAAAA,UAAU,CAACc,eAAe,CACvBJ,MADQ,CACAC,MAAD,IAAYK,MAAM,CAACL,MAAM,CAACM,MAAD,CAAP,CAAN,KAA2BD,MAAM,CAACE,KAAD,CAD5C,CAAD,CAAV;AAED;;AACD,QAAIH,UAAU,KAAK,WAAnB,EAAgC;AAC9Bf,MAAAA,UAAU,CAACc,eAAe,CACvBJ,MADQ,CACAC,MAAD,IAAYK,MAAM,CAACL,MAAM,CAACM,MAAD,CAAP,CAAN,GAAyBD,MAAM,CAACE,KAAD,CAD1C,CAAD,CAAV;AAED;;AACD,QAAIH,UAAU,KAAK,WAAnB,EAAgC;AAC9Bf,MAAAA,UAAU,CAACc,eAAe,CACvBJ,MADQ,CACAC,MAAD,IAAYK,MAAM,CAACL,MAAM,CAACM,MAAD,CAAP,CAAN,GAAyBD,MAAM,CAACE,KAAD,CAD1C,CAAD,CAAV;AAED;;AACD,WAAO,IAAP;AACD,GAdD;;AAgBA,QAAMC,iBAAiB,GAAIV,IAAD,IAAU;AAClCX,IAAAA,UAAU,CAACe,eAAe,CAACO,aAAa,CAACX,IAAD,CAAd,CAAhB,CAAV;AACD,GAFD;;AAIA,QAAMY,OAAO,GAAG;AACd1B,IAAAA,IADc;AAEdK,IAAAA,UAFc;AAGdD,IAAAA,OAHc;AAIdF,IAAAA,OAJc;AAKdC,IAAAA;AALc,GAAhB;AAQA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAGuB,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3B,QADH,CADF;AAKD,CAzDD;;AA2DAD,gBAAgB,CAAC6B,SAAjB,GAA6B;AAC3B5B,EAAAA,QAAQ,EAAEP,KAAK,GAAGoC;AADS,CAA7B;AAIA,eAAe9B,gBAAf","sourcesContent":["import { shape } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport getPlanetsStarWars from '../Services/fetchAPI';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {},\n    filterByNumericValues: [{}],\n    order: {},\n  });\n\n  const fetchPlanetsStarWars = async () => {\n    const { results } = await getPlanetsStarWars();\n    results.forEach((element) => delete element.residents);\n    setData(results);\n  };\n\n  useEffect(() => {\n    fetchPlanetsStarWars();\n    setFilters(data);\n  }, []);\n\n  const filterByName = (name) => {\n    setFilters(data.filter((planet) => planet.name.match(name)));\n  };\n\n  const filtersByNumber = (planetsFiltered) => {\n    if (comparison === 'igual a') {\n      setFilters(planetsFiltered\n        .filter((planet) => Number(planet[column]) === Number(value)));\n    }\n    if (comparison === 'menor que') {\n      setFilters(planetsFiltered\n        .filter((planet) => Number(planet[column]) < Number(value)));\n    }\n    if (comparison === 'maior que') {\n      setFilters(planetsFiltered\n        .filter((planet) => Number(planet[column]) > Number(value)));\n    }\n    return true;\n  };\n\n  const handleClickFilter = (name) => {\n    setPlanets(filtersByNumber(filterByNames(name)));\n  };\n\n  const context = {\n    data,\n    setFilters,\n    filters,\n    planets,\n    setPlanets,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children }\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired,\n};\n\nexport default StarWarsProvider;\n"]},"metadata":{},"sourceType":"module"}