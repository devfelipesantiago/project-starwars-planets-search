{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js\";\nimport { shape } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport getPlanetsStarWars from '../Services/fetchAPI';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({\n  children\n}) => {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: [],\n    order: {\n      column: 'Name',\n      sort: 'ASC'\n    }\n  });\n\n  const fetchPlanetsStarWars = async () => {\n    const {\n      results\n    } = await getPlanetsStarWars();\n    results.forEach(element => delete element.residents);\n    setData(results);\n  };\n\n  useEffect(() => {\n    fetchPlanetsStarWars();\n    setPlanets(data);\n  }, []);\n\n  const filterByNames = name => {\n    return data.filter(planet => planet.name.match(name));\n  };\n\n  const filtersByNumber = planetsFiltered => {\n    console.log(filters.filterByNumericValues[0]);\n    if (!filters.filterByNumericValues[0]) return;\n    const {\n      column,\n      comparison,\n      value\n    } = filters.filterByNumericValues[0];\n\n    if (comparison === 'igual a') {\n      setPlanets(planetsFiltered.filter(planet => Number(planet[column]) === Number(value)));\n    }\n\n    if (comparison === 'menor que') {\n      setPlanets(planetsFiltered.filter(planet => Number(planet[column]) < Number(value)));\n    }\n\n    if (comparison === 'maior que') {\n      setPlanets(planetsFiltered.filter(planet => Number(planet[column]) > Number(value)));\n    }\n\n    return true;\n  };\n\n  useEffect(() => {\n    filtersByNumber(filterByNames(filters.filterByName.name));\n  }, [filters]);\n  const context = {\n    data,\n    setFilters,\n    filters,\n    planets,\n    setPlanets,\n    filterByNames,\n    filtersByNumber\n  };\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired\n};\nexport default StarWarsProvider;","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js"],"names":["shape","React","useEffect","useState","getPlanetsStarWars","StarWarsContext","StarWarsProvider","children","data","setData","planets","setPlanets","filters","setFilters","filterByName","name","filterByNumericValues","order","column","sort","fetchPlanetsStarWars","results","forEach","element","residents","filterByNames","filter","planet","match","filtersByNumber","planetsFiltered","console","log","comparison","value","Number","context","propTypes","isRequired"],"mappings":"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","sourcesContent":["import { shape } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport getPlanetsStarWars from '../Services/fetchAPI';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [],\n    order: {\n      column: 'Name',\n      sort: 'ASC',\n    },\n  });\n\n  const fetchPlanetsStarWars = async () => {\n    const { results } = await getPlanetsStarWars();\n    results.forEach((element) => delete element.residents);\n    setData(results);\n  };\n\n  useEffect(() => {\n    fetchPlanetsStarWars();\n    setPlanets(data);\n  }, []);\n\n  const filterByNames = (name) => {\n    return data.filter((planet) => planet.name.match(name));\n  };\n\n  const filtersByNumber = (planetsFiltered) => {\n    console.log(filters.filterByNumericValues[0]);\n    if (!filters.filterByNumericValues[0]) return;\n    const { column, comparison, value } = filters.filterByNumericValues[0];\n    if (comparison === 'igual a') {\n      setPlanets(planetsFiltered\n        .filter((planet) => Number(planet[column]) === Number(value)));\n    }\n    if (comparison === 'menor que') {\n      setPlanets(planetsFiltered\n        .filter((planet) => Number(planet[column]) < Number(value)));\n    }\n    if (comparison === 'maior que') {\n      setPlanets(planetsFiltered\n        .filter((planet) => Number(planet[column]) > Number(value)));\n    }\n    return true;\n  };\n\n  useEffect(() => {\n    filtersByNumber(filterByNames(filters.filterByName.name));\n  }, [filters]);\n\n  const context = {\n    data,\n    setFilters,\n    filters,\n    planets,\n    setPlanets,\n    filterByNames,\n    filtersByNumber,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children }\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired,\n};\n\nexport default StarWarsProvider;\n"]},"metadata":{},"sourceType":"module"}