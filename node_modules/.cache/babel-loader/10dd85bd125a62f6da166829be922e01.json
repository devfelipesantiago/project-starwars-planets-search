{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js\";\nimport { shape } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport getPlanetsStarWars from '../Services/fetchAPI';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({\n  children\n}) => {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: [],\n    order: {\n      column: 'Name',\n      sort: 'ASC'\n    }\n  });\n\n  const fetchPlanetsStarWars = async () => {\n    const {\n      results\n    } = await getPlanetsStarWars();\n    results.forEach(element => delete element.residents);\n    setData(results);\n  };\n\n  useEffect(() => {\n    fetchPlanetsStarWars();\n  }, []);\n  useEffect(() => {\n    setPlanets(data);\n  }, [data]);\n\n  const filterByName = () => data.filter(planet => planet.name.match(filters.filterByName.name));\n\n  const filtersByNumber = planetsFiltered => {\n    setPlanets(planetsFiltered.filter(planet => console.log(planet)));\n  };\n\n  useEffect(() => {\n    filtersByNumber(filterByName());\n  }, [filters]);\n  const context = {\n    data,\n    setFilters,\n    filters,\n    planets,\n    setPlanets\n  };\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired\n};\nexport default StarWarsProvider;","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Context/StarWarsProvider.js"],"names":["shape","React","useEffect","useState","getPlanetsStarWars","StarWarsContext","StarWarsProvider","children","data","setData","planets","setPlanets","filters","setFilters","filterByName","name","filterByNumericValues","order","column","sort","fetchPlanetsStarWars","results","forEach","element","residents","filter","planet","match","filtersByNumber","planetsFiltered","console","log","context","propTypes","isRequired"],"mappings":";AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC;AACrCW,IAAAA,YAAY,EAAE;AACZC,MAAAA,IAAI,EAAE;AADM,KADuB;AAIrCC,IAAAA,qBAAqB,EAAE,EAJc;AAKrCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,MADH;AAELC,MAAAA,IAAI,EAAE;AAFD;AAL8B,GAAD,CAAtC;;AAWA,QAAMC,oBAAoB,GAAG,YAAY;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAMjB,kBAAkB,EAA5C;AACAiB,IAAAA,OAAO,CAACC,OAAR,CAAiBC,OAAD,IAAa,OAAOA,OAAO,CAACC,SAA5C;AACAf,IAAAA,OAAO,CAACY,OAAD,CAAP;AACD,GAJD;;AAMAnB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,oBAAoB;AACrB,GAFQ,EAEN,EAFM,CAAT;AAIAlB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,UAAU,CAACH,IAAD,CAAV;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,QAAMM,YAAY,GAAG,MAAMN,IAAI,CAC5BiB,MADwB,CAChBC,MAAD,IAAYA,MAAM,CAACX,IAAP,CAAYY,KAAZ,CAAkBf,OAAO,CAACE,YAAR,CAAqBC,IAAvC,CADK,CAA3B;;AAGA,QAAMa,eAAe,GAAIC,eAAD,IAAqB;AAC3ClB,IAAAA,UAAU,CAACkB,eAAe,CAACJ,MAAhB,CAAwBC,MAAD,IAAYI,OAAO,CAACC,GAAR,CAAYL,MAAZ,CAAnC,CAAD,CAAV;AACD,GAFD;;AAIAxB,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,eAAe,CAACd,YAAY,EAAb,CAAf;AACD,GAFQ,EAEN,CAACF,OAAD,CAFM,CAAT;AAIA,QAAMoB,OAAO,GAAG;AACdxB,IAAAA,IADc;AAEdK,IAAAA,UAFc;AAGdD,IAAAA,OAHc;AAIdF,IAAAA,OAJc;AAKdC,IAAAA;AALc,GAAhB;AAQA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAGqB,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGzB,QADH,CADF;AAKD,CApDD;;AAsDAD,gBAAgB,CAAC2B,SAAjB,GAA6B;AAC3B1B,EAAAA,QAAQ,EAAEP,KAAK,GAAGkC;AADS,CAA7B;AAIA,eAAe5B,gBAAf","sourcesContent":["import { shape } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport getPlanetsStarWars from '../Services/fetchAPI';\nimport StarWarsContext from './StarWarsContext';\n\nconst StarWarsProvider = ({ children }) => {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [],\n    order: {\n      column: 'Name',\n      sort: 'ASC',\n    },\n  });\n\n  const fetchPlanetsStarWars = async () => {\n    const { results } = await getPlanetsStarWars();\n    results.forEach((element) => delete element.residents);\n    setData(results);\n  };\n\n  useEffect(() => {\n    fetchPlanetsStarWars();\n  }, []);\n\n  useEffect(() => {\n    setPlanets(data);\n  }, [data]);\n\n  const filterByName = () => data\n    .filter((planet) => planet.name.match(filters.filterByName.name));\n\n  const filtersByNumber = (planetsFiltered) => {\n    setPlanets(planetsFiltered.filter((planet) => console.log(planet)));\n  };\n\n  useEffect(() => {\n    filtersByNumber(filterByName());\n  }, [filters]);\n\n  const context = {\n    data,\n    setFilters,\n    filters,\n    planets,\n    setPlanets,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children }\n    </StarWarsContext.Provider>\n  );\n};\n\nStarWarsProvider.propTypes = {\n  children: shape().isRequired,\n};\n\nexport default StarWarsProvider;\n"]},"metadata":{},"sourceType":"module"}