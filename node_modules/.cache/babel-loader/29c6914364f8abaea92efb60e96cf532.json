{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Components/Table.jsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport StarWarsContext from '../Context/StarWarsContext';\nimport FiltersComponent from './Filters';\n\nconst Table = () => {\n  const {\n    data,\n    fetchPlanetsStarWars,\n    filters\n  } = useContext(StarWarsContext);\n  const [planets, setPlanets] = useState(data);\n  useEffect(() => {\n    fetchPlanetsStarWars();\n    console.log(planets);\n  }, []);\n\n  const renderHeader = () => /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"Rotation Period\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, \"Orbital Period\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, \"diameter\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, \"Climate\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"Gravity\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, \"Terrain\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"Surface Water\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"Population\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Films\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Created\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Edited\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"URL\"));\n\n  const renderBody = list => list.map((planet, index) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"data-testid\": \"planet-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, planet.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, planet.rotation_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, planet.orbital_period), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, planet.diameter), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, planet.climate), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, planet.gravity), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, planet.terrain), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, planet.surface_water), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, planet.population), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, planet.films), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, planet.created), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, planet.edited), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, planet.url)));\n\n  const filtersByName = () => {\n    const {\n      filterByName: {\n        name\n      }\n    } = filters;\n    return data.filter(planet => planet.name.match(name) && planet.name);\n  };\n\n  const filtersByBiggerThen = () => {\n    const {\n      column,\n      value\n    } = filters.filterByNumericValues[0];\n    return data.filter(planet => Number(planet[column]) > value);\n  };\n\n  const filtersByLessThen = () => {\n    const {\n      column,\n      value\n    } = filters.filterByNumericValues[0];\n    return data.filter(planet => Number(planet[column]) < value);\n  };\n\n  const filtersByIqualTo = () => {\n    const {\n      column = 0,\n      value\n    } = filters.filterByNumericValues[0];\n    return data.filter(planet => planet[column] === value);\n  };\n\n  console.log(filtersByIqualTo());\n\n  const handleClickFilter = planets => {\n    const {\n      comparison\n    } = filters.filterByNumericValues[0];\n    if (comparison === 'igual a') return filtersByIqualTo();\n    if (comparison === 'menor que') return filtersByLessThen();\n    if (comparison === 'maior que') return filtersByBiggerThen();\n  };\n\n  const renderWithFilters = () => {\n    if (filters.filterByName.name) return renderBody(filtersByName());\n    renderBody(planets);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FiltersComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, renderHeader(), renderBody(planets))));\n};\n\nexport default Table;","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-starwars-planets-search/src/Components/Table.jsx"],"names":["React","useContext","useEffect","useState","StarWarsContext","FiltersComponent","Table","data","fetchPlanetsStarWars","filters","planets","setPlanets","console","log","renderHeader","renderBody","list","map","planet","index","name","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","filtersByName","filterByName","filter","match","filtersByBiggerThen","column","value","filterByNumericValues","Number","filtersByLessThen","filtersByIqualTo","handleClickFilter","comparison","renderWithFilters"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport StarWarsContext from '../Context/StarWarsContext';\nimport FiltersComponent from './Filters';\n\nconst Table = () => {\n  const {\n    data,\n    fetchPlanetsStarWars,\n    filters,\n  } = useContext(StarWarsContext);\n\n  const [planets, setPlanets] = useState(data);\n\n  useEffect(() => {\n    fetchPlanetsStarWars();\n    console.log(planets);\n  }, []);\n\n  const renderHeader = () => (\n    <tr>\n      <th>Name</th>\n      <th>Rotation Period</th>\n      <th>Orbital Period</th>\n      <th>diameter</th>\n      <th>Climate</th>\n      <th>Gravity</th>\n      <th>Terrain</th>\n      <th>Surface Water</th>\n      <th>Population</th>\n      <th>Films</th>\n      <th>Created</th>\n      <th>Edited</th>\n      <th>URL</th>\n    </tr>\n  );\n\n  const renderBody = (list) => (\n    list.map((planet, index) => (\n      <tr key={ index }>\n        <td data-testid=\"planet-name\">{ planet.name }</td>\n        <td>{ planet.rotation_period }</td>\n        <td>{ planet.orbital_period }</td>\n        <td>{ planet.diameter }</td>\n        <td>{ planet.climate }</td>\n        <td>{ planet.gravity }</td>\n        <td>{ planet.terrain }</td>\n        <td>{ planet.surface_water }</td>\n        <td>{ planet.population }</td>\n        <td>{ planet.films }</td>\n        <td>{ planet.created }</td>\n        <td>{ planet.edited }</td>\n        <td>{ planet.url }</td>\n      </tr>\n    ))\n  );\n\n  const filtersByName = () => {\n    const { filterByName: { name } } = filters;\n    return data.filter((planet) => planet.name.match(name) && planet.name);\n  };\n\n  const filtersByBiggerThen = () => {\n    const { column, value } = filters.filterByNumericValues[0];\n    return data.filter((planet) => Number(planet[column]) > value);\n  };\n\n  const filtersByLessThen = () => {\n    const { column, value } = filters.filterByNumericValues[0];\n    return data.filter((planet) => Number(planet[column]) < value);\n  };\n\n  const filtersByIqualTo = () => {\n    const { column = 0, value } = filters.filterByNumericValues[0];\n    return data.filter((planet) => planet[column] === value);\n  };\n\n  console.log(filtersByIqualTo());\n\n  const handleClickFilter = (planets) => {\n    const { comparison } = filters.filterByNumericValues[0];\n    if (comparison === 'igual a') return filtersByIqualTo();\n    if (comparison === 'menor que') return filtersByLessThen();\n    if (comparison === 'maior que') return filtersByBiggerThen();\n  };\n\n  const renderWithFilters = () => {\n    if (filters.filterByName.name) return renderBody(filtersByName());\n    renderBody(planets);\n  };\n\n  return (\n    <>\n      <FiltersComponent />\n      <table>\n        <tbody>\n          { renderHeader() }\n          { renderBody(planets) }\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}